dat <- df_pproteomics_norm_to_total[, c(15:23)]
#set unique ID column as row name
rownames(dat) <- df_pproteomics_norm_to_total[, "uniqueID"]
#DE analysis
groups <- factor(rep(c("G12D_KO", "G12D_WT"), c(6, 3)))
design = model.matrix(~ 0 + groups)
colnames(design) = gsub("groups", "", colnames(design))
contrast =  limma::makeContrasts(contrasts = c("G12D_KO-G12D_WT"), levels = design)
fit1 <- limma::lmFit(dat, design)
fit2 <- limma::contrasts.fit(fit1, contrasts = contrast)
fit3 <- limma::eBayes(fit2)
limma.results <- limma::topTable(fit3, number = nrow(dat))
#add unique ID as column
limma.results$uniqueID <- rownames(limma.results)
#merge DE stats with abundance data frame
df_pproteomics_norm_to_total <- merge(limma.results, df_pproteomics_norm_to_total, by = "uniqueID")
#filter for top 21 phospho-sites or Adj P-value < 0.75
df_pproteomics_norm_to_total <- head(df_pproteomics_norm_to_total[with(df_pproteomics_norm_to_total, order(adj.P.Val)),], 21)
#select and order abundance columns
df_protein_levels <- cbind(df_pproteomics_norm_to_total[, c(12:30)][, grepl("WT_G_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("KO_G_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("WT_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("Het_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("KO_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])])
#convert to Z-score matrix
df_protein_levels$mean_all <- rowMeans(df_protein_levels[, c(1:19)])
df_protein_levels$sd_all <- apply(df_protein_levels[, c(1:19)], 1, sd)
Z_score <- function(x) with(df_protein_levels, (x - mean_all)/sd_all)
df_protein_Z_score <- cbind(apply(df_protein_levels[, c(1:(ncol(df_protein_levels) - 2))], 2, Z_score))
rownames(df_protein_Z_score) <- df_pproteomics_norm_to_total$Sum_Index_Unique_Gene
matrix_Z_score_total <- as.matrix(df_protein_Z_score)
#create heatmap
heatmap_list_total <- ComplexHeatmap::Heatmap(matrix_Z_score_total,
name = "matrix_Z_score_total",
show_column_names = FALSE,
row_names_side = "right",
row_names_gp = grid::gpar(fontface = "plain", fontsize = 12),
column_names_side = "top",
row_dend_side = "left",
column_dend_side = "bottom",
layer_fun = function(j, i, x, y, width, height, fill) {
mat = ComplexHeatmap::restore_matrix(j, i, x, y)
ind = unique(c(mat[, c(3, 5, 8, 14)]))
grid.rect(x = x[ind] + grid::unit(0.5/ncol(matrix_Z_score_total), "npc"),
y = y[ind],
width = grid::unit(0.03, "inches"),
height = grid::unit(1/nrow(matrix_Z_score_total), "npc"),
gp = grid::gpar(col = "white")
)
},
col = circlize::colorRamp2(c(-ceiling(max(abs(matrix_Z_score_total), na.rm = T)), 0, ceiling(max(abs(matrix_Z_score_total), na.rm = T))), c("blue", "white", c("red"))),
top_annotation = ComplexHeatmap::columnAnnotation(empty = ComplexHeatmap::anno_empty(border = FALSE, height = grid::unit(12, "mm"))),
column_order = 1:ncol(matrix_Z_score_total),
height = nrow(matrix_Z_score_total) * grid::unit(4.2, "mm"),
width = ncol(matrix_Z_score_total) * grid::unit(6, "mm"),
border_gp = grid::gpar(col = "black"),
heatmap_legend_param = list(
title = NULL,
title_position = "topcenter",
legend_height = grid::unit(6, "cm"),
direction = c("horizontal")))
#draw heatmap
ComplexHeatmap::draw(heatmap_list_total, heatmap_legend_side = "bottom")
#select viewport and define dimensions
grid::seekViewport("annotation_empty_1")
loc1 = grid::deviceLoc(x = grid::unit(0, "npc"), y = grid::unit(0, "npc"))
loc2 = grid::deviceLoc(x = grid::unit(1, "npc"), y = grid::unit(1, "npc"))
#create top labels
grid::grid.text("Insr",
x = (loc2$x - loc1$x) * -0.0075,
y = 0.25,
gp = grid::gpar(fontsize = 14,
fontface = "italic"),
hjust = 1)
grid::grid.text(c(expression("w/w"),
expression("f/f"),
expression("w/w"),
expression("w/f"),
expression("f/f")),
x = c((3/2)/ncol(matrix_Z_score_total),
(3 + 2/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3 + 5/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3 + 5 + 6/2)/ncol(matrix_Z_score_total)),
y = 0.25,
just = c("center", "center"),
gp = grid::gpar(fontsize = 14,
col = c("#0e6e80",
"#ce1e68",
"#3b54a3",
"#f47d23",
"#bbbd32")))
grid::grid.rect(x = 12/19,
y = 0.6,
height = grid::unit(0.01, "inches"),
width = 14/19*(loc2$x - loc1$x),
just = c("center", "center"),
gp = grid::gpar(fill = "black",
col = "black",
lwd = 1))
grid::grid.text(expression(italic("Kras")^"G12D"),
x = (loc2$x - loc1$x) * 12.5/20,
y = 1,
gp = grid::gpar(fontsize = 12),
hjust = 0.5)
#select viewport and define dimensions
grid::seekViewport("heatmap_legend")
loc1 = grid::deviceLoc(x = grid::unit(0, "npc"), y = grid::unit(0, "npc"))
loc2 = grid::deviceLoc(x = grid::unit(1, "npc"), y = grid::unit(1, "npc"))
#create legend title
grid::grid.text("Protein Z-Score",
x = 0.5,
y = -0.5,
gp = grid::gpar(fontsize = 11))
#clear environment
rm(list = ls())
#set seed
set.seed(123)
#import phosphoproteomics protein file
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics_all.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
#select needed columns
df_pproteomics <- df_pproteomics[, c(4:5, 12, 14:15, 29:47)]
#remove rows with no protein
df_pproteomics <- subset(df_pproteomics, !df_pproteomics$`Master Protein Accessions` == "")
#replace empty abundances with 0
df_pproteomics[df_pproteomics == ""] <- 0
#covert numbers to numeric
df_pproteomics[, c(6:24)] <- as.data.frame(sapply(df_pproteomics[, c(6:24)], as.numeric))
#separate rows with multiple proteins
df_pproteomics <- tidyr::separate_rows(df_pproteomics, `Master Protein Accessions`, sep = "; ")
#separate rows with multiple peptide position ranges
df_pproteomics <- tidyr::separate_rows(df_pproteomics, `Positions in Master Proteins`, sep = "; ")
#convert Uniprot to gene name
df_pproteomics$Gene <- AnnotationDbi::mapIds(org.Mm.eg.db, keys = df_pproteomics$`Master Protein Accessions`, column = "SYMBOL", keytype = "UNIPROT", multiVals = "first")
#extract peptide position range
df_pproteomics$Position <- stringi::stri_join_list(regmatches(df_pproteomics$`Positions in Master Proteins`, gregexpr("(?<=\\[).+?(?=\\])", df_pproteomics$`Positions in Master Proteins`, perl = T)))
#extract peptide starting position
df_pproteomics$Position_Start <- as.numeric(stringi::stri_join_list(regmatches(df_pproteomics$`Positions in Master Proteins`, gregexpr("(?<=\\[).+?(?=\\-)", df_pproteomics$`Positions in Master Proteins`, perl = T))))
#extract phospho-site location relative to peptide
df_pproteomics$Last_Phospho_Location <- stringi::stri_locate_last_fixed(df_pproteomics$Modifications, "xPhospho")
#extract phospho modification
df_pproteomics$Last_Phospho <- substr(df_pproteomics$Modifications, df_pproteomics$Last_Phospho_Location - 1, nchar(df_pproteomics$Modifications))
#extract phospho-site
df_pproteomics$Last_Phospho_Info <- stringi::stri_join_list(regmatches(df_pproteomics$Last_Phospho, gregexpr("(?<=\\[).+?(?=\\])", df_pproteomics$Last_Phospho, perl = T)))
#remove confidence from phospho-site
df_pproteomics$Last_Phospho_Info <- gsub("\\((.*?))", "", df_pproteomics$Last_Phospho_Info)
#separate rows with multiple phospho-sites
df_pproteomics <- tidyr::separate_rows(df_pproteomics, Last_Phospho_Info, sep = "; ")
#extract phospho-site in protein
df_pproteomics$Phospho_Numeric <- ifelse(grepl("\\d", df_pproteomics$Last_Phospho_Info), paste0(stringr::str_extract(df_pproteomics$Last_Phospho_Info, "[^\\d]+"), df_pproteomics$Position_Start + as.numeric(stringr::str_extract(df_pproteomics$Last_Phospho_Info, "[\\d^]+")) - 1), df_pproteomics$Last_Phospho_Info)
#capitalize gene names as proteins
df_pproteomics$Gene <- toupper(df_pproteomics$Gene)
#create Uniprot with phospho-site column
df_pproteomics$Sum_Index_Unique <- ifelse(grepl("\\d", df_pproteomics$Last_Phospho_Info), paste(df_pproteomics$`Master Protein Accessions`, df_pproteomics$Phospho_Numeric), paste(df_pproteomics$`Positions in Master Proteins`, df_pproteomics$Last_Phospho_Info))
#create gene name with phospho-site column
df_pproteomics$Sum_Index_Unique_Gene <- ifelse(grepl("\\d", df_pproteomics$Last_Phospho_Info), paste(df_pproteomics$Gene, df_pproteomics$Phospho_Numeric), paste(df_pproteomics$Gene, df_pproteomics$`Positions in Master Proteins`, df_pproteomics$Last_Phospho_Info))
#only include phospho-sites with defined numerical positions
df_pproteomics <- df_pproteomics[grepl("\\d", df_pproteomics$Last_Phospho_Info),]
#select columns needed
df_pproteomics <- cbind(df_pproteomics[, c(6:24)], df_pproteomics[, c("Master Protein Accessions",
"Gene",
"Sum_Index_Unique",
"Sum_Index_Unique_Gene")])
#remove duplicate rows
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics),]
#aggregate phospho-site by sum
df_pproteomics <- aggregate(df_pproteomics[, c(1:19)], by = list(df_pproteomics$`Master Protein Accessions`,
df_pproteomics$Gene,
df_pproteomics$Sum_Index_Unique,
df_pproteomics$Sum_Index_Unique_Gene), FUN = sum)
#rename ID column names
colnames(df_pproteomics)[1:4] <- c("Master Protein Accessions", "Gene", "Sum_Index_Unique", "Sum_Index_Unique_Gene")
#annotation phospho-site columns
colnames(df_pproteomics)[5:23] <- paste(colnames(df_pproteomics)[5:23], rep("pproteomics", ncol(df_pproteomics[5:23])), sep = "_")
#import total protein file
df_total_proteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_total_protein.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_total_proteomics) <- df_total_proteomics[1,]
df_total_proteomics <- df_total_proteomics[-1,]
#select needed columns
df_total_proteomics <- df_total_proteomics[, c(3, 33:39, 41:52)]
#filter for only rows with all total protein sample abundances present
df_total_proteomics <- subset(df_total_proteomics, !rowSums(df_total_proteomics[, c(2:20)] == "") > 0)
#rename total protein column
colnames(df_total_proteomics)[1] <- c("Master Protein Accessions")
#annotation phospho-site columns
colnames(df_total_proteomics)[2:20] <- paste(colnames(df_total_proteomics)[2:20], rep("total", ncol(df_total_proteomics[2:20])), sep = "_")
#merge phospho-site and total protein by protein
df_pproteomics <- merge(df_pproteomics, df_total_proteomics, by = "Master Protein Accessions", all = TRUE)
#filter out non-merged rows
df_pproteomics <- subset(df_pproteomics, !rowSums(is.na(df_pproteomics[, c(3, 24)])) > 0)
#select pproteomics columns
df_pproteomics_for_norm <- df_pproteomics[, grepl("_pproteomics", colnames(df_pproteomics))]
#select total proteomics columns
df_total_proteomics_for_norm <- df_pproteomics[, grepl("_total", colnames(df_pproteomics))]
#normalize pproteomics to total
df_pproteomics_norm_to_total <- data.frame(sapply(df_pproteomics_for_norm, function(x) as.numeric(as.character(x))))/data.frame(sapply(df_total_proteomics_for_norm, function(x) as.numeric(as.character(x))))
#reattach ID columns
df_pproteomics_norm_to_total <- cbind(df_pproteomics[, c(1:4)], df_pproteomics_norm_to_total)
#create unique ID per row
df_pproteomics_norm_to_total$uniqueID <- paste(1:nrow(df_pproteomics_norm_to_total), df_pproteomics_norm_to_total$Gene)
#remove pproteomics annotation
colnames(df_pproteomics_norm_to_total) <- gsub("_pproteomics", "", colnames(df_pproteomics_norm_to_total))
#select G12D KO and G12D WT columns
dat <- df_pproteomics_norm_to_total[, c(15:23)]
#set unique ID column as row name
rownames(dat) <- df_pproteomics_norm_to_total[, "uniqueID"]
#DE analysis
groups <- factor(rep(c("G12D_KO", "G12D_WT"), c(6, 3)))
design = model.matrix(~ 0 + groups)
colnames(design) = gsub("groups", "", colnames(design))
contrast =  limma::makeContrasts(contrasts = c("G12D_KO-G12D_WT"), levels = design)
fit1 <- limma::lmFit(dat, design)
fit2 <- limma::contrasts.fit(fit1, contrasts = contrast)
fit3 <- limma::eBayes(fit2)
limma.results <- limma::topTable(fit3, number = nrow(dat))
#add unique ID as column
limma.results$uniqueID <- rownames(limma.results)
#merge DE stats with abundance data frame
df_pproteomics_norm_to_total <- merge(limma.results, df_pproteomics_norm_to_total, by = "uniqueID")
#filter for top 21 phospho-sites or Adj P-value < 0.75
df_pproteomics_norm_to_total <- head(df_pproteomics_norm_to_total[with(df_pproteomics_norm_to_total, order(adj.P.Val)),], 21)
#select and order abundance columns
df_protein_levels <- cbind(df_pproteomics_norm_to_total[, c(12:30)][, grepl("WT_G_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("KO_G_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("WT_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("Het_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])],
df_pproteomics_norm_to_total[, c(12:30)][, grepl("KO_G12D_", colnames(df_pproteomics_norm_to_total)[c(12:30)])])
#convert to Z-score matrix
df_protein_levels$mean_all <- rowMeans(df_protein_levels[, c(1:19)])
df_protein_levels$sd_all <- apply(df_protein_levels[, c(1:19)], 1, sd)
Z_score <- function(x) with(df_protein_levels, (x - mean_all)/sd_all)
df_protein_Z_score <- cbind(apply(df_protein_levels[, c(1:(ncol(df_protein_levels) - 2))], 2, Z_score))
rownames(df_protein_Z_score) <- df_pproteomics_norm_to_total$Sum_Index_Unique_Gene
matrix_Z_score_total <- as.matrix(df_protein_Z_score)
#create heatmap
heatmap_list_total <- ComplexHeatmap::Heatmap(matrix_Z_score_total,
name = "matrix_Z_score_total",
show_column_names = FALSE,
row_names_side = "right",
row_names_gp = grid::gpar(fontface = "plain", fontsize = 12),
column_names_side = "top",
row_dend_side = "left",
column_dend_side = "bottom",
layer_fun = function(j, i, x, y, width, height, fill) {
mat = ComplexHeatmap::restore_matrix(j, i, x, y)
ind = unique(c(mat[, c(3, 5, 8, 13)]))
grid.rect(x = x[ind] + grid::unit(0.5/ncol(matrix_Z_score_total), "npc"),
y = y[ind],
width = grid::unit(0.03, "inches"),
height = grid::unit(1/nrow(matrix_Z_score_total), "npc"),
gp = grid::gpar(col = "white")
)
},
col = circlize::colorRamp2(c(-ceiling(max(abs(matrix_Z_score_total), na.rm = T)), 0, ceiling(max(abs(matrix_Z_score_total), na.rm = T))), c("blue", "white", c("red"))),
top_annotation = ComplexHeatmap::columnAnnotation(empty = ComplexHeatmap::anno_empty(border = FALSE, height = grid::unit(12, "mm"))),
column_order = 1:ncol(matrix_Z_score_total),
height = nrow(matrix_Z_score_total) * grid::unit(4.2, "mm"),
width = ncol(matrix_Z_score_total) * grid::unit(6, "mm"),
border_gp = grid::gpar(col = "black"),
heatmap_legend_param = list(
title = NULL,
title_position = "topcenter",
legend_height = grid::unit(6, "cm"),
direction = c("horizontal")))
#draw heatmap
ComplexHeatmap::draw(heatmap_list_total, heatmap_legend_side = "bottom")
#select viewport and define dimensions
grid::seekViewport("annotation_empty_1")
loc1 = grid::deviceLoc(x = grid::unit(0, "npc"), y = grid::unit(0, "npc"))
loc2 = grid::deviceLoc(x = grid::unit(1, "npc"), y = grid::unit(1, "npc"))
#create top labels
grid::grid.text("Insr",
x = (loc2$x - loc1$x) * -0.0075,
y = 0.25,
gp = grid::gpar(fontsize = 14,
fontface = "italic"),
hjust = 1)
grid::grid.text(c(expression("w/w"),
expression("f/f"),
expression("w/w"),
expression("w/f"),
expression("f/f")),
x = c((3/2)/ncol(matrix_Z_score_total),
(3 + 2/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3 + 5/2)/ncol(matrix_Z_score_total),
(3 + 2 + 3 + 5 + 6/2)/ncol(matrix_Z_score_total)),
y = 0.25,
just = c("center", "center"),
gp = grid::gpar(fontsize = 14,
col = c("#0e6e80",
"#ce1e68",
"#3b54a3",
"#f47d23",
"#bbbd32")))
grid::grid.rect(x = 12/19,
y = 0.6,
height = grid::unit(0.01, "inches"),
width = 14/19*(loc2$x - loc1$x),
just = c("center", "center"),
gp = grid::gpar(fill = "black",
col = "black",
lwd = 1))
grid::grid.text(expression(italic("Kras")^"G12D"),
x = (loc2$x - loc1$x) * 12.5/20,
y = 1,
gp = grid::gpar(fontsize = 12),
hjust = 0.5)
#select viewport and define dimensions
grid::seekViewport("heatmap_legend")
loc1 = grid::deviceLoc(x = grid::unit(0, "npc"), y = grid::unit(0, "npc"))
loc2 = grid::deviceLoc(x = grid::unit(1, "npc"), y = grid::unit(1, "npc"))
#create legend title
grid::grid.text("Protein Z-Score",
x = 0.5,
y = -0.5,
gp = grid::gpar(fontsize = 11))
#clear environment
rm(list = ls())
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
df_pproteomics <- df_pproteomics[, c("Gene",
"Annotated Sequence",
"Modifications",
"Modifications in Master Proteins",
"Master Protein Accessions",
"Positions in Master Proteins",
"(G12D_KO) / (G12D_WT)",
"Adj. P-Value: (G12D_KO) / (G12D_WT)")]
df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")] <- as.data.frame(sapply(df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")], as.numeric))
df_pproteomics$`log2 (G12D_KO) / (G12D_WT)` <- log2(df_pproteomics$`(G12D_KO) / (G12D_WT)`)
df_pproteomics$`-log10 Adj. P-Value: (G12D_KO) / (G12D_WT)` <- -log10(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`)
df_pproteomics <- subset(df_pproteomics, df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)` < 0.05)
colnames(df_pproteomics)[1] <- "#node1"
df_pproteomics <- df_pproteomics[with(df_pproteomics, order(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`, -abs(df_pproteomics$`log2 (G12D_KO) / (G12D_WT)`))),]
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics$`#node1`),]
View(df_pproteomics)
View(df_pproteomics)
View(df_pproteomics)
#clear environment
rm(list = ls())
#import file
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
#select columns
df_pproteomics <- df_pproteomics[, c("Gene",
"Master Protein Accessions",
"Positions in Master Proteins",
"(G12D_KO) / (G12D_WT)",
"Adj. P-Value: (G12D_KO) / (G12D_WT)")]
#convert numbers to numeric
df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")] <- as.data.frame(sapply(df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")], as.numeric))
#get log2 of fold change
df_pproteomics$`log2 (G12D_KO) / (G12D_WT)` <- log2(df_pproteomics$`(G12D_KO) / (G12D_WT)`)
#get -log10 of adj. p-value
df_pproteomics$`-log10 Adj. P-Value: (G12D_KO) / (G12D_WT)` <- -log10(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`)
#subset for significance and select proteins
df_pproteomics <- subset(df_pproteomics, df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)` < 0.05)
#rename gene column name
colnames(df_pproteomics)[1] <- "#node1"
#order by Adj. P-value and abs(log2FC)
df_pproteomics <- df_pproteomics[with(df_pproteomics, order(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`, -abs(df_pproteomics$`log2 (G12D_KO) / (G12D_WT)`))),]
#remove duplicates
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics$`#node1`),]
#export node table to SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig logFC and padj removed duplicates.tsv
write.table(df_pproteomics)
#import STRING protein mapping and edge table output files
df_string_network <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_interactions.tsv", check.names = FALSE, sep = "\t")
df_string_mapping <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_mapping.tsv", check.names = FALSE, sep = "\t")
#select name mapping columns
df_string_mapping <- df_string_mapping[, c("queryItem", "preferredName")]
#rename column names
colnames(df_string_mapping) <- c("queryItem2", "node2")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("node2"), all.x = TRUE)
#rename column names
colnames(df_string_mapping) <- c("queryItem", "#node1")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("#node1"), all.x = TRUE)
#replace mapped values with input values
df_string_network$`#node1` <- df_string_network$queryItem
df_string_network$node2 <- df_string_network$queryItem2
#export edge table to SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_interactions remapped.tsv
write.table(df_string_network)
#clear environment
rm(list = ls())
#import file
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
#select columns
df_pproteomics <- df_pproteomics[, c("Gene",
"Master Protein Accessions",
"Positions in Master Proteins",
"(G12D_KO) / (G12D_WT)",
"Adj. P-Value: (G12D_KO) / (G12D_WT)")]
#convert numbers to numeric
df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")] <- as.data.frame(sapply(df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")], as.numeric))
#get log2 of fold change
df_pproteomics$`log2 (G12D_KO) / (G12D_WT)` <- log2(df_pproteomics$`(G12D_KO) / (G12D_WT)`)
#get -log10 of adj. p-value
df_pproteomics$`-log10 Adj. P-Value: (G12D_KO) / (G12D_WT)` <- -log10(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`)
#subset for significance and select proteins
df_pproteomics <- subset(df_pproteomics, df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)` < 0.05)
#rename gene column name
colnames(df_pproteomics)[1] <- "#node1"
#order by Adj. P-value and abs(log2FC)
df_pproteomics <- df_pproteomics[with(df_pproteomics, order(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`, -abs(df_pproteomics$`log2 (G12D_KO) / (G12D_WT)`))),]
#remove duplicates
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics$`#node1`),]
#export node table to SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig logFC and padj removed duplicates.tsv
write.table(df_pproteomics)
#import STRING protein mapping and edge table output files
df_string_network <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_interactions.tsv", check.names = FALSE, sep = "\t")
df_string_mapping <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_mapping.tsv", check.names = FALSE, sep = "\t")
#select name mapping columns
df_string_mapping <- df_string_mapping[, c("queryItem", "preferredName")]
#rename column names
colnames(df_string_mapping) <- c("queryItem2", "node2")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("node2"), all.x = TRUE)
#rename column names
colnames(df_string_mapping) <- c("queryItem", "#node1")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("#node1"), all.x = TRUE)
#replace mapped values with input values
df_string_network$`#node1` <- df_string_network$queryItem
df_string_network$node2 <- df_string_network$queryItem2
#export edge table to SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_interactions remapped.tsv
write.table(df_string_network)
#clear environment
rm(list = ls())
#import file
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
#select columns
df_pproteomics <- df_pproteomics[, c("Gene",
"Master Protein Accessions",
"Positions in Master Proteins",
"(G12D_KO) / (G12D_WT)",
"Adj. P-Value: (G12D_KO) / (G12D_WT)")]
#convert numbers to numeric
df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")] <- as.data.frame(sapply(df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")], as.numeric))
#get log2 of fold change
df_pproteomics$`log2 (G12D_KO) / (G12D_WT)` <- log2(df_pproteomics$`(G12D_KO) / (G12D_WT)`)
#get -log10 of adj. p-value
df_pproteomics$`-log10 Adj. P-Value: (G12D_KO) / (G12D_WT)` <- -log10(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`)
#subset for significance and select proteins
df_pproteomics <- subset(df_pproteomics, df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)` < 0.05)
#rename gene column name
colnames(df_pproteomics)[1] <- "#node1"
#order by Adj. P-value and abs(log2FC)
df_pproteomics <- df_pproteomics[with(df_pproteomics, order(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`, -abs(df_pproteomics$`log2 (G12D_KO) / (G12D_WT)`))),]
#remove duplicates
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics$`#node1`),]
#export node table to SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig logFC and padj removed duplicates.tsv
write.table(df_pproteomics)
#import STRING protein mapping and edge table output files
df_string_network <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_interactions.tsv", check.names = FALSE, sep = "\t")
df_string_mapping <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_phosphoproteomics_G12D_WT_vs_KO sig string_mapping.tsv", check.names = FALSE, sep = "\t")
#select name mapping columns
df_string_mapping <- df_string_mapping[, c("queryItem", "preferredName")]
#rename column names
colnames(df_string_mapping) <- c("queryItem2", "node2")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("node2"), all.x = TRUE)
#rename column names
colnames(df_string_mapping) <- c("queryItem", "#node1")
#merge mapping to network
df_string_network <- merge(df_string_network, df_string_mapping, by = c("#node1"), all.x = TRUE)
#replace mapped values with input values
df_string_network$`#node1` <- df_string_network$queryItem
df_string_network$node2 <- df_string_network$queryItem2
#clear environment
rm(list = ls())
#import file
df_pproteomics <- read.csv(".\\Data\\SCPC#46_03_Jim_Anni_pancreatic_cancer_total_phospho_combined_LFQ_phosphoproteomics.csv", check.names = FALSE, header = FALSE)[-c(1:2),]
#fix column names
colnames(df_pproteomics) <- df_pproteomics[1,]
df_pproteomics <- df_pproteomics[-1,]
#select columns
df_pproteomics <- df_pproteomics[, c("Gene",
"Annotated Sequence",
"Master Protein Accessions",
"Positions in Master Proteins",
"(G12D_KO) / (G12D_WT)",
"Adj. P-Value: (G12D_KO) / (G12D_WT)")]
#convert numbers to numeric
df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")] <- as.data.frame(sapply(df_pproteomics[, c("(G12D_KO) / (G12D_WT)", "Adj. P-Value: (G12D_KO) / (G12D_WT)")], as.numeric))
#get log2 of fold change
df_pproteomics$`log2 (G12D_KO) / (G12D_WT)` <- log2(df_pproteomics$`(G12D_KO) / (G12D_WT)`)
#get -log10 of adj. p-value
df_pproteomics$`-log10 Adj. P-Value: (G12D_KO) / (G12D_WT)` <- -log10(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`)
#subset for significance and select proteins
df_pproteomics <- subset(df_pproteomics, df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)` < 0.05)
#rename gene column name
colnames(df_pproteomics)[1] <- "#node1"
#order by Adj. P-value and abs(log2FC)
df_pproteomics <- df_pproteomics[with(df_pproteomics, order(df_pproteomics$`Adj. P-Value: (G12D_KO) / (G12D_WT)`, -abs(df_pproteomics$`log2 (G12D_KO) / (G12D_WT)`))),]
#remove duplicates
df_pproteomics <- df_pproteomics[!duplicated(df_pproteomics$`#node1`),]
View(df_pproteomics)
